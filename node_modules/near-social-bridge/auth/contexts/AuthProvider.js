import React, { createContext, useCallback, useEffect, useState } from 'react';
import { getConnectionStatus, onConnectObservable } from '../../services/bridge-service';
import getUserInfo from '../getUserInfo';
import isLocalDev from '../../utils/isLocalDev';
var defaultValue = {
    user: undefined,
    ready: false
};
export var AuthContext = createContext(defaultValue);
var AuthProvider = function (_a) {
    var children = _a.children;
    var _b = useState(), user = _b[0], setUser = _b[1];
    var _c = useState(false), ready = _c[0], setReady = _c[1];
    var fetchUserInfo = useCallback(function () {
        getUserInfo()
            .then(function (userInfo) {
            if (!userInfo.error) {
                setUser(userInfo);
            }
            setReady(true);
        })["catch"](function () {
            setReady(true);
        });
    }, []);
    // Fetch user info
    useEffect(function () {
        var onConnectHandler = function () {
            onConnectObservable.unsubscribe(onConnectHandler);
            fetchUserInfo();
        };
        // If it's connected already, just get the info
        if (getConnectionStatus() === 'connected') {
            fetchUserInfo();
        }
        // DEV - calls anyways if it's localhost
        if (isLocalDev) {
            fetchUserInfo();
        }
        onConnectObservable.subscribe(onConnectHandler);
        return function () {
            onConnectObservable.unsubscribe(onConnectHandler);
        };
    }, [fetchUserInfo]);
    return React.createElement(AuthContext.Provider, { value: { user: user, ready: ready } }, children);
};
export default AuthProvider;
