"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.NearSocialBridgeContext = void 0;
var isLocalDev_1 = __importDefault(require("../../utils/isLocalDev"));
var react_1 = __importStar(require("react"));
var AuthProvider_1 = __importDefault(require("../../auth/contexts/AuthProvider"));
var bridge_service_1 = require("../../services/bridge-service");
var defaultValue = {
    postMessage: function () {
        throw new Error('postMessage must be defined!');
    },
    onGetMessage: function () {
        throw new Error('onGetMessage must be defined!');
    },
    simulateIFrameMessage: function () {
        throw new Error('simulateIFrameMessage must be defined!');
    }
};
exports.NearSocialBridgeContext = (0, react_1.createContext)(defaultValue);
/**
 * Provides the Near Social Bridge features.
 *
 * Fallback component is displayed (if provided) until the connection is established with the Widget
 * @returns
 */
var NearSocialBridgeProvider = function (_a) {
    var children = _a.children, fallback = _a.fallback;
    var _b = (0, react_1.useState)({ cb: function () { } }), _onGetMessage = _b[0], set_onGetMessage = _b[1];
    var _c = (0, react_1.useState)(false), isConnected = _c[0], setIsConnected = _c[1];
    /**
     * Post Message
     */
    var postMessage = (0, react_1.useCallback)(function (message) {
        (0, bridge_service_1.postMessage)(message);
    }, []);
    /**
     * Set the onGetMessage handler
     */
    var onGetMessage = (0, react_1.useCallback)(function (cb) {
        set_onGetMessage({ cb: cb });
    }, []);
    /**
     * Simulate the iframe's message prop to send a message to the external app
     */
    var simulateIFrameMessage = (0, react_1.useCallback)(function (message) {
        var _a;
        // NOTE: experimental, should be tested
        (_a = window.top) === null || _a === void 0 ? void 0 : _a.postMessage(message);
    }, []);
    (0, react_1.useEffect)(function () {
        // Set up the message receiver
        var handler = function (event) {
            if (_onGetMessage.cb && event.type === 'message') {
                _onGetMessage.cb(event);
            }
        };
        bridge_service_1.bridgeServiceObservable.subscribe(handler);
        // Init Bridge Service
        (0, bridge_service_1.initBridgeService)();
        return function () {
            bridge_service_1.bridgeServiceObservable.unsubscribe(handler);
        };
    }, [_onGetMessage]);
    // Get to know when the connection is established. The children is going to render after the connection
    (0, react_1.useEffect)(function () {
        var handler = function () {
            setIsConnected(true);
        };
        bridge_service_1.onConnectObservable.subscribe(handler);
        return function () {
            bridge_service_1.onConnectObservable.unsubscribe(handler);
        };
    }, []);
    if (!isConnected && !isLocalDev_1["default"]) {
        if (fallback)
            return react_1["default"].createElement(react_1["default"].Fragment, null, fallback);
        return null;
    }
    return (react_1["default"].createElement(exports.NearSocialBridgeContext.Provider, { value: { postMessage: postMessage, onGetMessage: onGetMessage, simulateIFrameMessage: simulateIFrameMessage } },
        react_1["default"].createElement(AuthProvider_1["default"], null, children)));
};
exports["default"] = NearSocialBridgeProvider;
