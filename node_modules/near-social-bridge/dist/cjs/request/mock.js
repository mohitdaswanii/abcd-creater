"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
exports.__esModule = true;
exports.mockUser = exports.setupMock = exports.createMock = exports.getMockedResponse = exports.mockInitialPayload = exports.createMockUser = exports.globalMock = void 0;
var constants_1 = require("../constants");
var isDevelopment_1 = __importDefault(require("../utils/isDevelopment"));
var isLocalDev_1 = __importDefault(require("../utils/isLocalDev"));
var elements_1 = require("../utils/faker/elements");
/**
 * Global mock state
 */
exports.globalMock = (_a = {},
    // Minimum mocked answers to make it works locally (localhost)
    // auto inject "nsb:navigation:sync-content-height" mock
    _a[constants_1.REQUEST_KEYS.NAVIGATION_SYNC_CONTENT_HIGHT_VIEWER] = function () { return null; },
    _a);
var mockOptions = { delay: 500 };
/**
 * Returns a fake user info - Util for Auth hook and contexts
 * @returns
 */
var createMockUser = function (defaultValues) {
    var userFirstName = (defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.firstName) || (0, elements_1.randName)();
    var userLastName = (defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.lastName) || (0, elements_1.randName)();
    var linktree = userFirstName.toLowerCase();
    return {
        accountId: (defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.accountId) || "".concat((0, elements_1.randUserName)(userFirstName, userLastName), ".near").toLowerCase(),
        profileInfo: {
            backgroundImage: {
                url: (defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.backgroundImage) ||
                    'https://media.licdn.com/dms/image/C4E16AQGYJPypiink2w/profile-displaybackgroundimage-shrink_350_1400/0/1653934756486?e=1684972800&v=beta&t=9xQG1PqqF7TpTKyoTDOIWVIigxo3wdgmu0eDBw5uwug'
            },
            description: elements_1.loremIpsum,
            name: "".concat(userFirstName, " ").concat(userLastName),
            image: {
                ipfs_cid: (defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.imageIPFScid) || "https://i.pravatar.cc/150?u=".concat(userFirstName)
            },
            linktree: {
                github: linktree,
                twitter: linktree,
                telegram: linktree,
                website: 'fakedomain.fake.io'
            }
        }
    };
};
exports.createMockUser = createMockUser;
/**
 * Mock the `initialPayload` prop
 * @param initialPayload
 */
var mockInitialPayload = function (initialPayload) {
    exports.globalMock[constants_1.LOCAL_MOCK_KEYS.INITIAL_PAYLOAD] = function () { return initialPayload; };
};
exports.mockInitialPayload = mockInitialPayload;
/**
 * Get mocked response for a given request
 * @param requestType request type
 * @returns mocked response
 */
var getMockedResponse = function (requestType, payload) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve) {
                var _a;
                if (isDevelopment_1["default"] && isLocalDev_1["default"] && Object.keys(exports.globalMock).length > 0) {
                    var response_1 = (_a = exports.globalMock[requestType]) !== null && _a !== void 0 ? _a : null;
                    setTimeout(function () {
                        resolve(response_1(payload));
                    }, mockOptions.delay);
                }
            })];
    });
}); };
exports.getMockedResponse = getMockedResponse;
/**
 * Create and register a new mock for requests. This helps you create the contracts for
 * each request before implementing them inside the Widget.
 * @param requestType Request type
 * @param handler Mocked request handler (mocks server-side)
 */
var createMock = function (requestType, handler) {
    exports.globalMock[requestType] = handler;
};
exports.createMock = createMock;
/**
 * Setup mock
 * @param options
 * @returns
 */
var setupMock = function (options) { return (mockOptions = __assign(__assign({}, mockOptions), options)); };
exports.setupMock = setupMock;
/**
 * Mock authenticated user. You can use `createMockUser()` method to provide the user object
 * @param userInfo
 * @returns
 */
var mockUser = function (userInfo) { return (0, exports.createMock)(constants_1.REQUEST_KEYS.AUTH_GET_USER_INFO, function () { return userInfo; }); };
exports.mockUser = mockUser;
