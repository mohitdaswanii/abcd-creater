"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.buildRequestBody = void 0;
var bridge_service_1 = require("../services/bridge-service");
var isDevelopment_1 = __importDefault(require("../utils/isDevelopment"));
var isLocalDev_1 = __importDefault(require("../utils/isLocalDev"));
var mock_1 = require("./mock");
/**
 * Build a request body
 * @param type Request type to be handled inside the View
 * @param payload Request payload
 * @returns
 */
var buildRequestBody = function (type, payload) {
    return {
        from: 'external-app',
        type: type,
        payload: payload
    };
};
exports.buildRequestBody = buildRequestBody;
/**
 * Send a request to the Near Social View
 * @param requestType Request type to be handled inside the View (you can use `buildRequestBody` in order to
 * follow the pattern)
 * @param payload Any payload to be sent to the View
 * @param {forceTryAgain: boolean, timeout: number} options Force the request to re-try every <timeout> (default is 1 second)
 * @returns
 */
var request = function (requestType, payload, options) {
    // Use mock? -> is dev, is local, the "requestType" has a mock
    if (isDevelopment_1["default"] && isLocalDev_1["default"] && mock_1.globalMock[requestType]) {
        return (0, mock_1.getMockedResponse)(requestType, payload);
    }
    // Go the regular way
    (0, bridge_service_1.initBridgeService)();
    return new Promise(function (resolve, reject) {
        var gotPayload = false;
        var tries = 0;
        // Observe it till get the answer from the View
        var checkMessage = function (e) {
            if (e.data.type === 'answer' && e.data.requestType === requestType) {
                gotPayload = true;
                resolve(e.data.payload);
                bridge_service_1.bridgeServiceObservable.unsubscribe(checkMessage);
            }
        };
        bridge_service_1.bridgeServiceObservable.subscribe(checkMessage);
        // Post Message
        var message = (0, exports.buildRequestBody)(requestType, payload);
        (0, bridge_service_1.postMessage)(message);
        // Timer to try again
        var checkAndTryAgain = function () {
            setTimeout(function () {
                if (!gotPayload) {
                    if (tries < 10) {
                        tries++;
                        (0, bridge_service_1.postMessage)(message);
                        checkAndTryAgain();
                    }
                    else {
                        reject("the Widget did not send a answer for request of type ".concat(requestType));
                    }
                }
            }, (options === null || options === void 0 ? void 0 : options.timeout) || 1000);
        };
        if (options === null || options === void 0 ? void 0 : options.forceTryAgain) {
            checkAndTryAgain();
        }
    });
};
exports["default"] = request;
