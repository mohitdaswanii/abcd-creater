import Observable from '../utils/observable';
export type UserInfo = {
    accountId: string;
    profileInfo?: {
        backgroundImage?: {
            url?: string;
        };
        description?: string;
        name?: string;
        image?: {
            ipfs_cid: string;
        };
        linktree?: {
            github?: string;
            twitter?: string;
            telegram?: string;
            website?: string;
        };
        tags?: any;
    };
    error?: string;
};
export type ConnectionPayload = {
    /**
     * Initial path to be rendered. This is optionally provided by the Near Social View
     */
    initialPath?: string;
    /**
     * User info
     */
    userInfo?: UserInfo;
    /**
     * Any initial payload provided by VM
     */
    initialPayload?: any;
};
/**
 * pending: the service was not initialized yet. You need to call initBridgeService().
 * waiting-for-viewer-signal: the service was initialized and is waiting for a positive signal from Viewer
 * connected: the service has a connection with the Viewer
 */
export type BridgeServiceStatus = 'pending' | 'waiting-for-viewer-signal' | 'connected';
/**
 * When any message comes
 */
export declare const bridgeServiceObservable: Observable<MessageEvent<any>>;
/**
 * When the connection is established
 */
export declare const onConnectObservable: Observable<ConnectionPayload>;
/**
 * Post message
 * @param message
 * @returns
 */
export declare const postMessage: (message: any) => void;
/**
 * Get the payload provided by the connection
 * @returns
 */
export declare const getConnectionPayload: <P extends ConnectionPayload>() => P;
/**
 * Get the current connection status
 */
export declare const getConnectionStatus: () => BridgeServiceStatus;
/**
 * Init the service
 * @param viewMessageSource
 */
export declare const initBridgeService: () => void;
