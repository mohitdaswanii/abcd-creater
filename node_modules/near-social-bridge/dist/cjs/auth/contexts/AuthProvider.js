"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.AuthContext = void 0;
var react_1 = __importStar(require("react"));
var bridge_service_1 = require("../../services/bridge-service");
var getUserInfo_1 = __importDefault(require("../getUserInfo"));
var isLocalDev_1 = __importDefault(require("../../utils/isLocalDev"));
var defaultValue = {
    user: undefined,
    ready: false
};
exports.AuthContext = (0, react_1.createContext)(defaultValue);
var AuthProvider = function (_a) {
    var children = _a.children;
    var _b = (0, react_1.useState)(), user = _b[0], setUser = _b[1];
    var _c = (0, react_1.useState)(false), ready = _c[0], setReady = _c[1];
    var fetchUserInfo = (0, react_1.useCallback)(function () {
        (0, getUserInfo_1["default"])()
            .then(function (userInfo) {
            if (!userInfo.error) {
                setUser(userInfo);
            }
            setReady(true);
        })["catch"](function () {
            setReady(true);
        });
    }, []);
    // Fetch user info
    (0, react_1.useEffect)(function () {
        var onConnectHandler = function () {
            bridge_service_1.onConnectObservable.unsubscribe(onConnectHandler);
            fetchUserInfo();
        };
        // If it's connected already, just get the info
        if ((0, bridge_service_1.getConnectionStatus)() === 'connected') {
            fetchUserInfo();
        }
        // DEV - calls anyways if it's localhost
        if (isLocalDev_1["default"]) {
            fetchUserInfo();
        }
        bridge_service_1.onConnectObservable.subscribe(onConnectHandler);
        return function () {
            bridge_service_1.onConnectObservable.unsubscribe(onConnectHandler);
        };
    }, [fetchUserInfo]);
    return react_1["default"].createElement(exports.AuthContext.Provider, { value: { user: user, ready: ready } }, children);
};
exports["default"] = AuthProvider;
