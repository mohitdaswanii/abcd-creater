import { UserInfo } from '../services/bridge-service';
/**
 * Global mock state
 */
export declare const globalMock: Record<string, Function>;
/**
 * Returns a fake user info - Util for Auth hook and contexts
 * @returns
 */
export declare const createMockUser: (defaultValues?: {
    accountId?: string;
    firstName?: string;
    lastName?: string;
    backgroundImage?: string;
    imageIPFScid?: string;
}) => UserInfo;
/**
 * Mock the `initialPayload` prop
 * @param initialPayload
 */
export declare const mockInitialPayload: (initialPayload: Record<any, any>) => void;
/**
 * Get mocked response for a given request
 * @param requestType request type
 * @returns mocked response
 */
export declare const getMockedResponse: <Data extends {}>(requestType: string, payload?: {}) => Promise<Data>;
/**
 * Create and register a new mock for requests. This helps you create the contracts for
 * each request before implementing them inside the Widget.
 * @param requestType Request type
 * @param handler Mocked request handler (mocks server-side)
 */
export declare const createMock: (requestType: string, handler: Function) => void;
/**
 * Setup mock
 * @param options
 * @returns
 */
export declare const setupMock: (options: {
    delay: number;
}) => {
    delay: number;
};
/**
 * Mock authenticated user. You can use `createMockUser()` method to provide the user object
 * @param userInfo
 * @returns
 */
export declare const mockUser: (userInfo: UserInfo) => void;
